From 2d6afc9174ac5583146ff92540fe7088636b4787 Mon Sep 17 00:00:00 2001
From: Gerry Kopec <Gerry.Kopec@windriver.com>
Date: Wed, 18 May 2016 20:15:33 -0400
Subject: [PATCH 1/1] Port KVM failure detection and recovery

Port R2 commit:
7063b69 VIM: Refactor KVM failure detection and recovery
   This moves the kvm failure detection and recovery functionality into
   TiS VIM. This update includes nova changes to distinguish between a
   KVM crash and stop, as well as sending crash notification

In addition, added tox testcases for crashed power_state and lifecycle
event.
---
 nova/compute/manager.py                     | 19 ++++++++-
 nova/notifications.py                       | 10 +++++
 nova/tests/unit/compute/test_compute_mgr.py | 28 ++++++++++++-
 nova/tests/unit/test_notifications.py       | 11 ++++-
 nova/tests/unit/virt/libvirt/fakelibvirt.py | 16 ++++++++
 nova/tests/unit/virt/libvirt/test_host.py   | 45 +++++++++++++++++++++
 nova/virt/event.py                          | 10 +++++
 nova/virt/libvirt/host.py                   | 13 +++++-
 8 files changed, 146 insertions(+), 6 deletions(-)

diff --git a/nova/compute/manager.py b/nova/compute/manager.py
index 6f7c4a9a63..cbb0abde14 100644
--- a/nova/compute/manager.py
+++ b/nova/compute/manager.py
@@ -1269,6 +1269,9 @@ class ComputeManager(manager.Manager):
             vm_power_state = power_state.RUNNING
         elif event.get_transition() == virtevent.EVENT_LIFECYCLE_SUSPENDED:
             vm_power_state = power_state.SUSPENDED
+        # WRS: add handling of crashed event
+        elif event.get_transition() == virtevent.EVENT_LIFECYCLE_CRASHED:
+            vm_power_state = power_state.CRASHED
         else:
             LOG.warning(_LW("Unexpected power state %d"),
                         event.get_transition())
@@ -4460,6 +4463,13 @@ class ComputeManager(manager.Manager):
         self._update_scheduler_instance_info(context, instance)
         self._notify_about_instance_usage(context, instance, 'unshelve.end')
 
+    # WRS: add handling of instance crash
+    def _request_recovery(self, context, instance):
+        """Instance crashed notification for recovery request."""
+        instance.save(expected_task_state=[None])
+        self._instance_update(context, instance,
+                              power_state=power_state.CRASHED)
+
     @messaging.expected_exceptions(NotImplementedError)
     @wrap_instance_fault
     def reset_network(self, context, instance):
@@ -6340,8 +6350,8 @@ class ComputeManager(manager.Manager):
             pass
         elif vm_state == vm_states.ACTIVE:
             # The only rational power state should be RUNNING
-            if vm_power_state in (power_state.SHUTDOWN,
-                                  power_state.CRASHED):
+            # WRS: crashed is handled separately
+            if vm_power_state == power_state.SHUTDOWN:
                 LOG.warning(_LW("Instance shutdown by itself. Calling the "
                                 "stop API. Current vm_state: %(vm_state)s, "
                                 "current task_state: %(task_state)s, "
@@ -6368,6 +6378,11 @@ class ComputeManager(manager.Manager):
                     LOG.exception(_LE("error during stop() in "
                                       "sync_power_state."),
                                   instance=db_instance)
+            # WRS: add handling of crashed state
+            elif vm_power_state == power_state.CRASHED:
+                LOG.warning(_LW("Instance crashed. Let VIM recover it.(%s)") %
+                          db_instance.uuid)
+                self._request_recovery(context, db_instance)
             elif vm_power_state == power_state.SUSPENDED:
                 LOG.warning(_LW("Instance is suspended unexpectedly. Calling "
                                 "the stop API."), instance=db_instance)
diff --git a/nova/notifications.py b/nova/notifications.py
index a7b4950dcb..a489d078af 100644
--- a/nova/notifications.py
+++ b/nova/notifications.py
@@ -13,6 +13,13 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
+#
+# Copyright (c) 2013-2016 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+#
 
 """Functionality related to notifications common to multiple layers of
 the system.
@@ -224,11 +231,14 @@ def _compute_states_payload(instance, old_vm_state=None,
     if old_task_state is None:
         old_task_state = instance["task_state"]
 
+    # WRS: add instance power_state to states_payload
+    power_state = instance["power_state"]
     states_payload = {
         "old_state": old_vm_state,
         "state": new_vm_state,
         "old_task_state": old_task_state,
         "new_task_state": new_task_state,
+        "power_state": power_state,
     }
     return states_payload
 
diff --git a/nova/tests/unit/compute/test_compute_mgr.py b/nova/tests/unit/compute/test_compute_mgr.py
index 20da8731dd..817005f406 100644
--- a/nova/tests/unit/compute/test_compute_mgr.py
+++ b/nova/tests/unit/compute/test_compute_mgr.py
@@ -9,6 +9,13 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
+#
+# Copyright (c) 2013-2016 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+#
 
 """Unit tests for ComputeManager()."""
 
@@ -106,6 +113,8 @@ class ComputeManagerUnitTestCase(test.NoDBTestCase):
                      virtevent.EVENT_LIFECYCLE_RESUMED: power_state.RUNNING,
                      virtevent.EVENT_LIFECYCLE_SUSPENDED:
                          power_state.SUSPENDED,
+                     # WRS: add crashed event
+                     virtevent.EVENT_LIFECYCLE_CRASHED: power_state.CRASHED,
         }
 
         for transition, pwr_state in six.iteritems(event_map):
@@ -1436,8 +1445,8 @@ class ComputeManagerUnitTestCase(test.NoDBTestCase):
         self.mox.UnsetStubs()
 
     def test_sync_instance_power_state_to_stop(self):
-        for ps in (power_state.SHUTDOWN, power_state.CRASHED,
-                   power_state.SUSPENDED):
+        # WRS: don't include crashed state - see added testcase
+        for ps in (power_state.SHUTDOWN, power_state.SUSPENDED):
             self._test_sync_to_stop(power_state.RUNNING, vm_states.ACTIVE, ps)
 
         for ps in (power_state.SHUTDOWN, power_state.CRASHED):
@@ -1447,6 +1456,21 @@ class ComputeManagerUnitTestCase(test.NoDBTestCase):
         self._test_sync_to_stop(power_state.SHUTDOWN, vm_states.STOPPED,
                                 power_state.RUNNING, force=True)
 
+    # WRS: add testcase for crashed scenario. Detect call to _request_recovery
+    def test_sync_instance_power_state_crashed(self):
+        driver_power_state = power_state.CRASHED
+        instance = self._get_sync_instance(
+                                power_state.RUNNING, vm_states.ACTIVE)
+        instance.save()
+        instance.refresh(use_slave=False)
+        self.mox.StubOutWithMock(self.compute, '_request_recovery')
+        self.compute._request_recovery(self.context, instance)
+        self.mox.ReplayAll()
+        self.compute._sync_instance_power_state(self.context, instance,
+                                                driver_power_state)
+        self.mox.VerifyAll()
+        self.mox.UnsetStubs()
+
     def test_sync_instance_power_state_to_terminate(self):
         self._test_sync_to_stop(power_state.RUNNING, vm_states.ACTIVE,
                                 power_state.SHUTDOWN,
diff --git a/nova/tests/unit/test_notifications.py b/nova/tests/unit/test_notifications.py
index 83f2d3cbb4..55a920a7b2 100644
--- a/nova/tests/unit/test_notifications.py
+++ b/nova/tests/unit/test_notifications.py
@@ -12,6 +12,13 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
+#
+# Copyright (c) 2013-2016 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+#
 
 """Tests for common notifications."""
 
@@ -484,8 +491,10 @@ class NotificationsTestCase(test.TestCase):
 class NotificationsFormatTestCase(test.NoDBTestCase):
 
     def test_state_computation(self):
+        # WRS: add power_state
         instance = {'vm_state': mock.sentinel.vm_state,
-                    'task_state': mock.sentinel.task_state}
+                    'task_state': mock.sentinel.task_state,
+                    'power_state': None}
         states = notifications._compute_states_payload(instance)
         self.assertEqual(mock.sentinel.vm_state, states['state'])
         self.assertEqual(mock.sentinel.vm_state, states['old_state'])
diff --git a/nova/tests/unit/virt/libvirt/fakelibvirt.py b/nova/tests/unit/virt/libvirt/fakelibvirt.py
index d95661cdff..3dbf287122 100644
--- a/nova/tests/unit/virt/libvirt/fakelibvirt.py
+++ b/nova/tests/unit/virt/libvirt/fakelibvirt.py
@@ -11,6 +11,13 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
+#
+# Copyright (c) 2013-2016 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+#
 
 import time
 import uuid
@@ -99,6 +106,15 @@ VIR_NODE_CPU_STATS_ALL_CPUS = -1
 
 VIR_DOMAIN_START_PAUSED = 1
 
+# WRS: add virDomainEventStoppedDetailType enum definitions
+VIR_DOMAIN_EVENT_STOPPED_SHUTDOWN = 0
+VIR_DOMAIN_EVENT_STOPPED_DESTROYED = 1
+VIR_DOMAIN_EVENT_STOPPED_CRASHED = 2
+VIR_DOMAIN_EVENT_STOPPED_MIGRATED = 3
+VIR_DOMAIN_EVENT_STOPPED_SAVED = 4
+VIR_DOMAIN_EVENT_STOPPED_FAILED = 5
+VIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT = 6
+
 # libvirtError enums
 # (Intentionally different from what's in libvirt. We do this to check,
 #  that consumers of the library are using the symbolic names rather than
diff --git a/nova/tests/unit/virt/libvirt/test_host.py b/nova/tests/unit/virt/libvirt/test_host.py
index 4f744b78f0..62ff7494e1 100644
--- a/nova/tests/unit/virt/libvirt/test_host.py
+++ b/nova/tests/unit/virt/libvirt/test_host.py
@@ -13,6 +13,13 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
+#
+# Copyright (c) 2016 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+#
 
 import uuid
 
@@ -203,6 +210,44 @@ class HostTestCase(test.NoDBTestCase):
         self.assertEqual(got_events[0].transition,
                          event.EVENT_LIFECYCLE_STOPPED)
 
+    # WRS: add testcase for crashed event
+    def test_event_lifecycle_crashed(self):
+        got_events = []
+
+        def handler(event):
+            got_events.append(event)
+
+        hostimpl = host.Host("qemu:///system",
+                             lifecycle_event_handler=handler)
+
+        conn = hostimpl.get_connection()
+        hostimpl._init_events_pipe()
+
+        fake_dom_xml = """
+                <domain type='kvm'>
+                  <uuid>cef19ce0-0ca2-11df-855d-b19fbce37686</uuid>
+                  <devices>
+                    <disk type='file'>
+                      <source file='filename'/>
+                    </disk>
+                  </devices>
+                </domain>
+            """
+        dom = fakelibvirt.Domain(conn,
+                                 fake_dom_xml,
+                                 False)
+        hostimpl._event_lifecycle_callback(
+            conn, dom, fakelibvirt.VIR_DOMAIN_EVENT_STOPPED,
+                       fakelibvirt.VIR_DOMAIN_EVENT_STOPPED_FAILED, hostimpl)
+        hostimpl._dispatch_events()
+
+        self.assertEqual(len(got_events), 1)
+        self.assertIsInstance(got_events[0], event.LifecycleEvent)
+        self.assertEqual(got_events[0].uuid,
+                         "cef19ce0-0ca2-11df-855d-b19fbce37686")
+        self.assertEqual(got_events[0].transition,
+                         event.EVENT_LIFECYCLE_CRASHED)
+
     def test_event_emit_delayed_call_delayed(self):
         ev = event.LifecycleEvent(
             "cef19ce0-0ca2-11df-855d-b19fbce37686",
diff --git a/nova/virt/event.py b/nova/virt/event.py
index 3b065bcb42..f56b354276 100644
--- a/nova/virt/event.py
+++ b/nova/virt/event.py
@@ -11,6 +11,13 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
+#
+# Copyright (c) 2013-2016 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+#
 
 """
 Asynchronous event notifications from virtualization drivers.
@@ -29,6 +36,8 @@ EVENT_LIFECYCLE_STOPPED = 1
 EVENT_LIFECYCLE_PAUSED = 2
 EVENT_LIFECYCLE_RESUMED = 3
 EVENT_LIFECYCLE_SUSPENDED = 4
+# WRS: add crashed event
+EVENT_LIFECYCLE_CRASHED = 5
 
 NAMES = {
     EVENT_LIFECYCLE_STARTED: _('Started'),
@@ -36,6 +45,7 @@ NAMES = {
     EVENT_LIFECYCLE_PAUSED: _('Paused'),
     EVENT_LIFECYCLE_RESUMED: _('Resumed'),
     EVENT_LIFECYCLE_SUSPENDED: _('Suspended'),
+    EVENT_LIFECYCLE_CRASHED: _('Crashed')
 }
 
 
diff --git a/nova/virt/libvirt/host.py b/nova/virt/libvirt/host.py
index de22a6d00f..b664cd93c4 100644
--- a/nova/virt/libvirt/host.py
+++ b/nova/virt/libvirt/host.py
@@ -17,6 +17,13 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
+#
+# Copyright (c) 2013-2016 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+#
 
 """
 Manages information about the host OS and hypervisor.
@@ -262,7 +269,11 @@ class Host(object):
         uuid = dom.UUIDString()
         transition = None
         if event == libvirt.VIR_DOMAIN_EVENT_STOPPED:
-            transition = virtevent.EVENT_LIFECYCLE_STOPPED
+            # WRS: transition to crashed if stop failed
+            if detail == libvirt.VIR_DOMAIN_EVENT_STOPPED_FAILED:
+                transition = virtevent.EVENT_LIFECYCLE_CRASHED
+            else:
+                transition = virtevent.EVENT_LIFECYCLE_STOPPED
         elif event == libvirt.VIR_DOMAIN_EVENT_STARTED:
             transition = virtevent.EVENT_LIFECYCLE_STARTED
         elif event == libvirt.VIR_DOMAIN_EVENT_SUSPENDED:
-- 
2.20.1

